<?php

namespace common\models;

use yii\base\Model;
use yii\data\ActiveDataProvider;
use common\models\UserConstructor;

/**
 * UserConstructorSearch represents the model behind the search form of `common\models\UserConstructor`.
 */
class UserConstructorSearch extends UserConstructor
{

    public function attributes()
    {
        return array_merge(parent::attributes() , ['name' , 'username']); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'constructor_id', 'user_id' , 'status_id'], 'integer'],
            [['qq_url' , 'name' , 'username'], 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = UserConstructor::find();

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'constructor_id' => $this->constructor_id,
            'user_id' => $this->user_id,
            'join_date' => $this->join_date,
            'end_date' => $this->end_date,
            'user_constructor.status_id' => $this->status_id,
        ]);

        $query->join('INNER JOIN' , 'user' , 'user.id = user_constructor.user_id');
        $query->join('INNER JOIN' , 'constructor' , 'constructor.id = user_constructor.constructor_id');

        $query->andFilterWhere(['like' , 'name' , $this->name]);
        $query->andFilterWhere(['like' , 'username' , $this->username]);

        $query->andFilterWhere(['like', 'qq_url', $this->qq_url]);

        return $dataProvider;
    }
}
